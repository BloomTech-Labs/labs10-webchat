{"version":3,"sources":["components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Chat","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","message","messages","socket","io","sendMessage","ev","preventDefault","emit","author","alert","setState","on","data","addMessage","console","log","concat","toConsumableArray","_this2","react_default","a","createElement","className","map","index","key","type","placeholder","value","onChange","target","onClick","Component","App","components_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAuEeA,cAnEd,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACZC,SAAU,GACVC,QAAS,GACTC,SAAU,IAELV,EAAKW,OAASC,IAAG,kBAErBZ,EAAKa,YAAc,SAACC,GACnBA,EAAGC,iBACAf,EAAKO,MAAMC,UAAYR,EAAKO,MAAME,QACpCT,EAAKW,OAAOK,KAAK,eAAgB,CAC/BC,OAAQjB,EAAKO,MAAMC,SACnBC,QAAST,EAAKO,MAAME,UAEhBS,MAAM,8DACblB,EAAKmB,SAAS,CAACV,QAAS,MAGrBT,EAAKW,OAAOS,GAAG,kBAAmB,SAASC,GAC9CC,EAAWD,KAGR,IAAMC,EAAa,SAACD,GACvBE,QAAQC,IAAIH,GACZrB,EAAKmB,SAAS,CAACT,SAAQ,GAAAe,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAMD,EAAKO,MAAMG,UAAjB,CAA2BW,MAClDE,QAAQC,IAAIxB,EAAKO,MAAMG,WA3Bb,OAAAV,wEA+BL,IAAA2B,EAAAxB,KACR,OACCyB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,eAGAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACb5B,KAAKI,MAAMG,SAASsB,IAAI,SAACvB,EAASwB,GAClC,OACCL,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,GAAQxB,EAAQQ,OAA1B,MAAqCR,EAAQA,YAIhDmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,YAAY,WAAWC,MAAOlC,KAAKI,MAAMC,SAAU8B,SAAU,SAAAxB,GAAE,OAAIa,EAAKR,SAAS,CAACX,SAAUM,EAAGyB,OAAOF,SAASN,UAAU,iBAC5IH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,YAAY,UAAUL,UAAU,eAAeM,MAAOlC,KAAKI,MAAME,QAAS6B,SAAU,SAAAxB,GAAE,OAAIa,EAAKR,SAAS,CAACV,QAASK,EAAGyB,OAAOF,WAC/IT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQU,QAASrC,KAAKU,YAAakB,UAAU,gCAA7C,sBAxDSU,aCcJC,0LAXX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,iDAGAH,EAAAC,EAAAC,cAACa,EAAD,cAPUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a903fce0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport io from 'socket.io-client';\n\nclass Chat extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tusername: '',\n\t\t\tmessage: '',\n\t\t\tmessages: []\n        };\n        this.socket = io('localhost:5000');\n\n\t\t\t\tthis.sendMessage = (ev) => {\n\t\t\t\t\tev.preventDefault();\n\t\t\t\t\tif(this.state.username && this.state.message) {\n\t\t\t\t\t\tthis.socket.emit('SEND_MESSAGE', {\n\t\t\t\t\t\t\t\tauthor: this.state.username,\n\t\t\t\t\t\t\t\tmessage: this.state.message\n\t\t\t\t\t\t});\n\t\t\t\t\t} else alert('You are missing one of the following(s): Username, Message');\n\t\t\t\t\tthis.setState({message: ''});\n\t\t\t\t}\n\n        this.socket.on('RECEIVE_MESSAGE', function(data) {\n\t\t\t\t\taddMessage(data);\n        });\n\n        const addMessage = (data) => {\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t\tthis.setState({messages: [...this.state.messages, data]});\n\t\t\t\t\tconsole.log(this.state.messages);\n        }\n        \n\t}\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t\t<div className=\"card-title\">\n\t\t\t\t\t\t\t\t\tGlobal Chat\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr/>\n\t\t\t\t\t\t\t\t\t<div className=\"messages\">\n\t\t\t\t\t\t\t\t\t\t{this.state.messages.map((message, index) => {\n\t\t\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={index}>{message.author} : {message.message}</div>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"footer\">\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" placeholder=\"Username\" value={this.state.username} onChange={ev => this.setState({username: ev.target.value})} className=\"form-control\"/>\n\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" placeholder=\"Message\" className=\"form-control\" value={this.state.message} onChange={ev => this.setState({message: ev.target.value})}/>\n\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\t\t<button onClick={this.sendMessage} className=\"btn btn-primary form-control\">Send</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Chat;","import React, { Component } from 'react';\nimport Chat from './components/Chat';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Welcome to Customer Service, how can we help?  \n        </header>\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}